{"ast":null,"code":"'use strict';\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nfunction _objectWithoutProperties(obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n}\n\nvar Promise = require(\"promise\");\n\nvar _require = require('../utils/razorpay-utils'),\n    normalizeDate = _require.normalizeDate,\n    normalizeBoolean = _require.normalizeBoolean,\n    normalizeNotes = _require.normalizeNotes;\n\nvar ID_REQUIRED_MSG = '`payment_id` is mandatory';\n\nmodule.exports = function (api) {\n  return {\n    all: function all() {\n      var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var callback = arguments[1];\n      var from = params.from,\n          to = params.to,\n          count = params.count,\n          skip = params.skip;\n\n      if (from) {\n        from = normalizeDate(from);\n      }\n\n      if (to) {\n        to = normalizeDate(to);\n      }\n\n      count = Number(count) || 10;\n      skip = Number(skip) || 0;\n      return api.get({\n        url: '/payments',\n        data: {\n          from: from,\n          to: to,\n          count: count,\n          skip: skip\n        }\n      }, callback);\n    },\n    fetch: function fetch(paymentId, callback) {\n      if (!paymentId) {\n        throw new Error('`payment_id` is mandatory');\n      }\n\n      return api.get({\n        url: '/payments/' + paymentId\n      }, callback);\n    },\n    capture: function capture(paymentId, amount, currency, callback) {\n      if (!paymentId) {\n        throw new Error('`payment_id` is mandatory');\n      }\n\n      if (!amount) {\n        throw new Error('`amount` is mandatory');\n      }\n\n      var payload = {\n        amount: amount\n      };\n      /**\n       * For backward compatibility,\n       * the third argument can be a callback\n       * instead of currency.\n       * Set accordingly.\n       */\n\n      if (typeof currency === 'function' && !callback) {\n        callback = currency;\n        currency = undefined;\n      } else if (typeof currency === 'string') {\n        payload.currency = currency;\n      }\n\n      return api.post({\n        url: '/payments/' + paymentId + '/capture',\n        data: payload\n      }, callback);\n    },\n    createPaymentJson: function createPaymentJson(params, callback) {\n      var url = 'payments/create/json',\n          rest = _objectWithoutProperties(params, []),\n          data = Object.assign(rest);\n\n      return api.post({\n        url: url,\n        data: data\n      }, callback);\n    },\n    createRecurringPayment: function createRecurringPayment(params, callback) {\n      var notes = params.notes,\n          rest = _objectWithoutProperties(params, ['notes']);\n\n      var data = Object.assign(rest, normalizeNotes(notes));\n      return api.post({\n        url: '/payments/create/recurring',\n        data: data\n      }, callback);\n    },\n    edit: function edit(paymentId) {\n      var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var callback = arguments[2];\n      var notes = params.notes;\n\n      if (!paymentId) {\n        throw new Error('`payment_id` is mandatory');\n      }\n\n      var data = Object.assign(normalizeNotes(notes));\n      return api.patch({\n        url: '/payments/' + paymentId,\n        data: data\n      }, callback);\n    },\n    refund: function refund(paymentId) {\n      var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var callback = arguments[2];\n\n      var notes = params.notes,\n          otherParams = _objectWithoutProperties(params, ['notes']);\n\n      if (!paymentId) {\n        throw new Error('`payment_id` is mandatory');\n      }\n\n      var data = Object.assign(otherParams, normalizeNotes(notes));\n      return api.post({\n        url: '/payments/' + paymentId + '/refund',\n        data: data\n      }, callback);\n    },\n    fetchMultipleRefund: function fetchMultipleRefund(paymentId) {\n      var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var callback = arguments[2];\n      /*\n       * Fetch multiple refunds for a payment\n       *\n       * @param {String} paymentId \n       * @param {Object} params\n       * @param {Function} callback\n       *\n       * @return {Promise}\n       */\n\n      var from = params.from,\n          to = params.to,\n          count = params.count,\n          skip = params.skip,\n          url = '/payments/' + paymentId + '/refunds';\n      return api.get({\n        url: url,\n        data: _extends({}, params, {\n          from: from,\n          to: to,\n          count: count,\n          skip: skip\n        })\n      }, callback);\n    },\n    fetchRefund: function fetchRefund(paymentId, refundId, callback) {\n      if (!paymentId) {\n        throw new Error('payment Id` is mandatory');\n      }\n\n      if (!refundId) {\n        throw new Error('refund Id` is mandatory');\n      }\n\n      return api.get({\n        url: '/payments/' + paymentId + '/refunds/' + refundId\n      }, callback);\n    },\n    fetchTransfer: function fetchTransfer(paymentId, callback) {\n      /*\n       * Fetch transfers for a payment\n       *\n       * @param {String} paymentId\n       * @param {Function} callback\n       *\n       * @return {Promise}\n       */\n      if (!paymentId) {\n        throw new Error('payment Id` is mandatory');\n      }\n\n      return api.get({\n        url: '/payments/' + paymentId + '/transfers'\n      }, callback);\n    },\n    transfer: function transfer(paymentId) {\n      var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var callback = arguments[2];\n\n      if (!paymentId) {\n        throw new Error('`payment_id` is mandatory');\n      }\n\n      var notes = params.notes,\n          otherParams = _objectWithoutProperties(params, ['notes']);\n\n      var data = Object.assign(otherParams, normalizeNotes(notes));\n\n      if (data.transfers) {\n        var transfers = data.transfers;\n        transfers.forEach(function (transfer) {\n          transfer.on_hold = normalizeBoolean(!!transfer.on_hold);\n        });\n      }\n\n      return api.post({\n        url: '/payments/' + paymentId + '/transfers',\n        data: data\n      }, callback);\n    },\n    bankTransfer: function bankTransfer(paymentId, callback) {\n      if (!paymentId) {\n        return Promise.reject(ID_REQUIRED_MSG);\n      }\n\n      return api.get({\n        url: '/payments/' + paymentId + '/bank_transfer'\n      }, callback);\n    },\n    fetchCardDetails: function fetchCardDetails(paymentId, callback) {\n      if (!paymentId) {\n        return Promise.reject(ID_REQUIRED_MSG);\n      }\n\n      return api.get({\n        url: '/payments/' + paymentId + '/card'\n      }, callback);\n    },\n    fetchPaymentDowntime: function fetchPaymentDowntime(callback) {\n      return api.get({\n        url: '/payments/downtimes'\n      }, callback);\n    },\n    fetchPaymentDowntimeById: function fetchPaymentDowntimeById(downtimeId, callback) {\n      /*\n       * Fetch Payment Downtime\n       *\n       * @param {String} downtimeId\n       * @param {Function} callback\n       *\n       * @return {Promise}\n       */\n      if (!downtimeId) {\n        return Promise.reject(\"Downtime Id is mandatory\");\n      }\n\n      return api.get({\n        url: '/payments/downtimes/' + downtimeId\n      }, callback);\n    },\n    otpSubmit: function otpSubmit(paymentId) {\n      var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var callback = arguments[2];\n      /*\n       * OTP Submit\n       *\n       * @param {String} paymentId\n       * @param {Object} params\n       * @param {Function} callback\n       *\n       * @return {Promise}\n       */\n\n      if (!paymentId) {\n        return Promise.reject(\"payment Id is mandatory\");\n      }\n\n      return api.post({\n        url: '/payments/' + paymentId + '/otp/submit',\n        data: params\n      }, callback);\n    }\n  };\n};","map":{"version":3,"sources":["/home/beleshivprasad/Desktop/inhouse_internship/source_code/node_modules/razorpay/dist/resources/payments.js"],"names":["_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","_objectWithoutProperties","obj","keys","indexOf","Promise","require","_require","normalizeDate","normalizeBoolean","normalizeNotes","ID_REQUIRED_MSG","module","exports","api","all","params","undefined","callback","from","to","count","skip","Number","get","url","data","fetch","paymentId","Error","capture","amount","currency","payload","post","createPaymentJson","rest","createRecurringPayment","notes","edit","patch","refund","otherParams","fetchMultipleRefund","fetchRefund","refundId","fetchTransfer","transfer","transfers","forEach","on_hold","bankTransfer","reject","fetchCardDetails","fetchPaymentDowntime","fetchPaymentDowntimeById","downtimeId","otpSubmit"],"mappings":"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","sourcesContent":["'use strict';\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nfunction _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }\n\nvar Promise = require(\"promise\");\n\nvar _require = require('../utils/razorpay-utils'),\n    normalizeDate = _require.normalizeDate,\n    normalizeBoolean = _require.normalizeBoolean,\n    normalizeNotes = _require.normalizeNotes;\n\nvar ID_REQUIRED_MSG = '`payment_id` is mandatory';\n\nmodule.exports = function (api) {\n  return {\n    all: function all() {\n      var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var callback = arguments[1];\n      var from = params.from,\n          to = params.to,\n          count = params.count,\n          skip = params.skip;\n\n\n      if (from) {\n        from = normalizeDate(from);\n      }\n\n      if (to) {\n        to = normalizeDate(to);\n      }\n\n      count = Number(count) || 10;\n      skip = Number(skip) || 0;\n\n      return api.get({\n        url: '/payments',\n        data: {\n          from: from,\n          to: to,\n          count: count,\n          skip: skip\n        }\n      }, callback);\n    },\n    fetch: function fetch(paymentId, callback) {\n      if (!paymentId) {\n        throw new Error('`payment_id` is mandatory');\n      }\n\n      return api.get({\n        url: '/payments/' + paymentId\n      }, callback);\n    },\n    capture: function capture(paymentId, amount, currency, callback) {\n      if (!paymentId) {\n        throw new Error('`payment_id` is mandatory');\n      }\n\n      if (!amount) {\n        throw new Error('`amount` is mandatory');\n      }\n\n      var payload = {\n        amount: amount\n      };\n\n      /**\n       * For backward compatibility,\n       * the third argument can be a callback\n       * instead of currency.\n       * Set accordingly.\n       */\n      if (typeof currency === 'function' && !callback) {\n        callback = currency;\n        currency = undefined;\n      } else if (typeof currency === 'string') {\n        payload.currency = currency;\n      }\n\n      return api.post({\n        url: '/payments/' + paymentId + '/capture',\n        data: payload\n      }, callback);\n    },\n    createPaymentJson: function createPaymentJson(params, callback) {\n      var url = 'payments/create/json',\n          rest = _objectWithoutProperties(params, []),\n          data = Object.assign(rest);\n\n      return api.post({\n        url: url,\n        data: data\n      }, callback);\n    },\n    createRecurringPayment: function createRecurringPayment(params, callback) {\n      var notes = params.notes,\n          rest = _objectWithoutProperties(params, ['notes']);\n\n      var data = Object.assign(rest, normalizeNotes(notes));\n\n      return api.post({\n        url: '/payments/create/recurring',\n        data: data\n      }, callback);\n    },\n    edit: function edit(paymentId) {\n      var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var callback = arguments[2];\n      var notes = params.notes;\n\n\n      if (!paymentId) {\n        throw new Error('`payment_id` is mandatory');\n      }\n\n      var data = Object.assign(normalizeNotes(notes));\n\n      return api.patch({\n        url: '/payments/' + paymentId,\n        data: data\n      }, callback);\n    },\n    refund: function refund(paymentId) {\n      var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var callback = arguments[2];\n\n      var notes = params.notes,\n          otherParams = _objectWithoutProperties(params, ['notes']);\n\n      if (!paymentId) {\n        throw new Error('`payment_id` is mandatory');\n      }\n\n      var data = Object.assign(otherParams, normalizeNotes(notes));\n      return api.post({\n        url: '/payments/' + paymentId + '/refund',\n        data: data\n      }, callback);\n    },\n    fetchMultipleRefund: function fetchMultipleRefund(paymentId) {\n      var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var callback = arguments[2];\n\n\n      /*\n       * Fetch multiple refunds for a payment\n       *\n       * @param {String} paymentId \n       * @param {Object} params\n       * @param {Function} callback\n       *\n       * @return {Promise}\n       */\n\n      var from = params.from,\n          to = params.to,\n          count = params.count,\n          skip = params.skip,\n          url = '/payments/' + paymentId + '/refunds';\n\n\n      return api.get({\n        url: url,\n        data: _extends({}, params, {\n          from: from,\n          to: to,\n          count: count,\n          skip: skip\n        })\n      }, callback);\n    },\n    fetchRefund: function fetchRefund(paymentId, refundId, callback) {\n\n      if (!paymentId) {\n        throw new Error('payment Id` is mandatory');\n      }\n\n      if (!refundId) {\n        throw new Error('refund Id` is mandatory');\n      }\n\n      return api.get({\n        url: '/payments/' + paymentId + '/refunds/' + refundId\n      }, callback);\n    },\n    fetchTransfer: function fetchTransfer(paymentId, callback) {\n\n      /*\n       * Fetch transfers for a payment\n       *\n       * @param {String} paymentId\n       * @param {Function} callback\n       *\n       * @return {Promise}\n       */\n\n      if (!paymentId) {\n        throw new Error('payment Id` is mandatory');\n      }\n\n      return api.get({\n        url: '/payments/' + paymentId + '/transfers'\n      }, callback);\n    },\n    transfer: function transfer(paymentId) {\n      var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var callback = arguments[2];\n\n      if (!paymentId) {\n        throw new Error('`payment_id` is mandatory');\n      }\n\n      var notes = params.notes,\n          otherParams = _objectWithoutProperties(params, ['notes']);\n\n      var data = Object.assign(otherParams, normalizeNotes(notes));\n\n      if (data.transfers) {\n        var transfers = data.transfers;\n        transfers.forEach(function (transfer) {\n          transfer.on_hold = normalizeBoolean(!!transfer.on_hold);\n        });\n      }\n      return api.post({\n        url: '/payments/' + paymentId + '/transfers',\n        data: data\n      }, callback);\n    },\n    bankTransfer: function bankTransfer(paymentId, callback) {\n\n      if (!paymentId) {\n\n        return Promise.reject(ID_REQUIRED_MSG);\n      }\n\n      return api.get({\n        url: '/payments/' + paymentId + '/bank_transfer'\n      }, callback);\n    },\n    fetchCardDetails: function fetchCardDetails(paymentId, callback) {\n\n      if (!paymentId) {\n\n        return Promise.reject(ID_REQUIRED_MSG);\n      }\n\n      return api.get({\n        url: '/payments/' + paymentId + '/card'\n      }, callback);\n    },\n    fetchPaymentDowntime: function fetchPaymentDowntime(callback) {\n\n      return api.get({\n        url: '/payments/downtimes'\n      }, callback);\n    },\n    fetchPaymentDowntimeById: function fetchPaymentDowntimeById(downtimeId, callback) {\n\n      /*\n       * Fetch Payment Downtime\n       *\n       * @param {String} downtimeId\n       * @param {Function} callback\n       *\n       * @return {Promise}\n       */\n\n      if (!downtimeId) {\n\n        return Promise.reject(\"Downtime Id is mandatory\");\n      }\n\n      return api.get({\n        url: '/payments/downtimes/' + downtimeId\n      }, callback);\n    },\n    otpSubmit: function otpSubmit(paymentId) {\n      var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var callback = arguments[2];\n\n\n      /*\n       * OTP Submit\n       *\n       * @param {String} paymentId\n       * @param {Object} params\n       * @param {Function} callback\n       *\n       * @return {Promise}\n       */\n\n      if (!paymentId) {\n\n        return Promise.reject(\"payment Id is mandatory\");\n      }\n\n      return api.post({\n        url: '/payments/' + paymentId + '/otp/submit',\n        data: params\n      }, callback);\n    }\n  };\n};"]},"metadata":{},"sourceType":"script"}